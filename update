#!/usr/bin/python
"""
2007-03-25 We had a problem where on Sundays all the trains would get
marked invalid. Hoping that's an amtrak fault, I shifted the crontab
to run at minute 5 instead of minute 0. If it still doesn't fix, we probably need more smarts about when to retry trains that seemed to be down for the day.


"""
import logging, optparse, urllib, time, datetime, pprint, pickle, os, cgitb
import TableParse
import kid
kid.enable_import()
import page
from scrape import fetchTrainInfo

    
def trainDatFile(trainNumber):
    return os.path.join(os.path.dirname(__file__), "data/train-%s.dat" % trainNumber)


parser = optparse.OptionParser()
parser.add_option("-d", "--debug", action="store_true", help="logging")
options, args = parser.parse_args()

logging.basicConfig()
log = logging.getLogger()
if options.debug:
    log.setLevel(logging.DEBUG)

cgitb.enable(format='txt')

page.now = datetime.datetime.now()
page.today = datetime.date.today()

NOT_RUNNING = datetime.datetime.today().replace(hour=0, minute=1, second=0, microsecond=0)

rows = [] # sorttime, tr
for name, trainNumber in (
    [("Capitol", x)
     for x in "521 523 525 527 529 531 533 535 537 541 543 545 547 549 551 553 723 727 729 733 737 741 743 745 747 749 751 720 724 728 732 734 736 738 742 744 746 748 518 520 522 524 526 528 530 532 534 536 538 540 542 544 546 548".split()] +
    [("San Joaquin", x) for x in "711 701 713 715 717 703 702 712 714 716 704 718".split()] +
    [("Coast Starlight", x) for x in "11 14".split()]):
    try:
        scheduled, actual, isEstimate, note = pickle.load(open(trainDatFile(trainNumber)))
        needFetch = False
    except IOError:
        needFetch = True
        log.debug("needFetch for %s because there is no saved info", trainNumber)

    if not needFetch:
        if scheduled.date() != datetime.date.today():
            needFetch = True
            log.debug("needFetch for %s because the saved info is not for today", trainNumber)
        else:
            log.debug("train %s saved date is %r, today is %r, so we don't need to fetch" % (trainNumber, scheduled.date(), datetime.date.today()))
        untilScheduled = (actual or scheduled) - datetime.datetime.now()
        if datetime.timedelta(minutes=-32) < untilScheduled < datetime.timedelta(hours=1):
            log.debug("needFetch for %s because it arrives within one hour (%s)" % (trainNumber, untilScheduled))
            needFetch = True
        
    if needFetch:
        try:
            scheduled, actual, isEstimate, note = fetchTrainInfo(trainNumber)
        except IndexError:
            scheduled, actual, isEstimate, note = NOT_RUNNING, None, False, None

    log.debug("train %s scheduled %s %s, arrives %s (%s)" % (trainNumber, scheduled, ('true', 'estd')[isEstimate], actual, note))

    if not scheduled:
        try:
            os.remove(trainDatFile(trainNumber))
        except OSError:
            pass
        continue

    if scheduled != NOT_RUNNING:
        scheduledTime = scheduled.time()
        actualTime = actual and actual.time()
        if note.startswith("The scheduled ") and note.endswith("Presently, no further information is available. Please check back later for updated information."):
            note = "[no further info]"
        
        rows.append((actual or scheduled, """
    <tr>
     <td><nobr>%(trainNumber)s %(name)s</nobr></td>
     <td><nobr>%(scheduledTime)s</nobr></td>
     <td bgcolor="#EDEAD0"><nobr>%(actualTime)s</nobr></td>
     <td>%(note)s</td>
    </tr>
        """ % vars()))

    pickle.dump((scheduled, actual, isEstimate, note), open(trainDatFile(trainNumber), "w"))

rows.sort()
printedNowBar = False
page.rowSection = ""
for t, row in rows:
    if not printedNowBar and t > datetime.datetime.now():
        page.rowSection += """<tr><td colspan="4" align="center" bgcolor="#D88585">now</td></tr>"""
        printedNowBar = True
    page.rowSection += row

out = open(os.path.join(os.path.dirname(__file__), "index.html.new"), "w")
print >>out, page.serialize(output="html-strict")
out.close()
os.rename(os.path.join(os.path.dirname(__file__), "index.html.new"), os.path.join(os.path.dirname(__file__), "index.html"))

